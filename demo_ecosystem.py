#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã "–≠–≤–æ–ª—é—Ü–∏—è: –ü—Ä–æ—Å—Ç–∞—è –∂–∏–∑–Ω—å" v2.0
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∏–ø—ã –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤, –∏—Ö –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
"""

from simulation import EvolutionSimulation
from organism import Organism
import time

def demo_ecosystem():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã"""
    print("üåç === –î–ï–ú–û –≠–ö–û–°–ò–°–¢–ï–ú–´ v2.0 === üåç\n")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    sim = EvolutionSimulation(width=1400, height=1000)
    
    print(f"üìè –†–∞–∑–º–µ—Ä –º–∏—Ä–∞: {sim.width}x{sim.height}")
    print(f"üå± –ú–∞–∫—Å–∏–º—É–º —Ä–∞—Å—Ç–µ–Ω–∏–π: {sim.max_food}")
    print(f"üî¢ –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è: {len(sim.get_organisms())}\n")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–ø—É–ª—è—Ü–∏—é
    organisms = sim.get_organisms()
    predators = [org for org in organisms if org.is_predator()]
    herbivores = [org for org in organisms if org.is_herbivore()]
    omnivores = [org for org in organisms if org.is_omnivore()]
    
    print("üß¨ –ê–ù–ê–õ–ò–ó –ù–ê–ß–ê–õ–¨–ù–û–ô –ü–û–ü–£–õ–Ø–¶–ò–ò:")
    print(f"üî¥ –•–∏—â–Ω–∏–∫–∏: {len(predators)} ({len(predators)/len(organisms)*100:.1f}%)")
    print(f"üü¢ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ: {len(herbivores)} ({len(herbivores)/len(organisms)*100:.1f}%)")
    print(f"üîµ –í—Å–µ—è–¥–Ω—ã–µ: {len(omnivores)} ({len(omnivores)/len(organisms)*100:.1f}%)")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤
    if predators:
        pred = predators[0]
        print(f"\nüî¥ –ü–†–ò–ú–ï–† –•–ò–©–ù–ò–ö–ê:")
        print(f"   –î–∏–µ—Ç–∞: {pred.genes['diet_preference']:.2f} (>0.6)")
        print(f"   –†–∞–∑–º–µ—Ä: {pred.genes['size']:.1f}")
        print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {pred.genes['speed']:.1f}")
        print(f"   –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å: {pred.genes['aggression']:.2f}")
    
    if herbivores:
        herb = herbivores[0]
        print(f"\nüü¢ –ü–†–ò–ú–ï–† –¢–†–ê–í–û–Ø–î–ù–û–ì–û:")
        print(f"   –î–∏–µ—Ç–∞: {herb.genes['diet_preference']:.2f} (<0.4)")
        print(f"   –†–∞–∑–º–µ—Ä: {herb.genes['size']:.1f}")
        print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {herb.genes['speed']:.1f}")
        print(f"   –°—Ç—Ä–∞—Ö: {herb.genes['fear_sensitivity']:.2f}")
    
    print(f"\nüå± –†–ê–°–¢–ï–ù–ò–Ø –í –ú–ò–†–ï: {len(sim.get_food_sources())}")
    food_types = {}
    for food in sim.get_food_sources():
        food_type = food.get('type', 'unknown')
        food_types[food_type] = food_types.get(food_type, 0) + 1
    
    for food_type, count in food_types.items():
        emoji = "üî¥" if food_type == "berry" else "üü¢" if food_type == "grass" else "üü†"
        print(f"   {emoji} {food_type.title()}: {count}")
    
    print("\n‚è∞ –ó–ê–ü–£–°–ö –°–ò–ú–£–õ–Ø–¶–ò–ò –ù–ê 100 –®–ê–ì–û–í...\n")
    
    # –°–∏–º—É–ª—è—Ü–∏—è
    for step in range(100):
        sim.update(dt=1.0)
        
        if step % 25 == 0:
            stats = sim.get_statistics()
            print(f"–®–∞–≥ {step:3d}: "
                  f"–í—Å–µ–≥–æ {stats['population']:2d} | "
                  f"üî¥{stats['predators']:2d} "
                  f"üü¢{stats['herbivores']:2d} "
                  f"üîµ{stats['omnivores']:2d} | "
                  f"–ü–æ–∫–æ–ª–µ–Ω–∏–µ {stats['avg_generation']:.1f}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ú–£–õ–Ø–¶–ò–ò:")
    final_stats = sim.get_statistics()
    
    print(f"üìà –ü–æ–ø—É–ª—è—Ü–∏—è: {sim.initial_organisms} ‚Üí {final_stats['population']} "
          f"({final_stats['population']/sim.initial_organisms*100:.0f}%)")
    
    print(f"üë∂ –†–æ–∂–¥–µ–Ω–∏–π: {final_stats['total_births']}")
    print(f"üíÄ –°–º–µ—Ä—Ç–µ–π: {final_stats['total_deaths']}")
    print(f"üß¨ –ü–æ–∫–æ–ª–µ–Ω–∏–π: {final_stats['avg_generation']:.1f}")
    
    print(f"\nüèÜ –¢–û–ü-5 –°–ê–ú–´–• –ü–†–ò–°–ü–û–°–û–ë–õ–ï–ù–ù–´–•:")
    best = sim.get_best_organisms(top_n=5)
    for i, org in enumerate(best, 1):
        type_emoji = "üî¥" if org.is_predator() else "üü¢" if org.is_herbivore() else "üîµ"
        print(f"   {i}. {type_emoji} {org.get_type_name()} | "
              f"–§–∏—Ç–Ω–µ—Å: {org.fitness:6.1f} | "
              f"–≠–Ω–µ—Ä–≥–∏—è: {org.energy:5.1f} | "
              f"–í–æ–∑—Ä–∞—Å—Ç: {org.age:6.1f}")
    
    print(f"\nüî¨ –≠–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
    if final_stats['avg_generation'] > 0:
        print(f"   üìè –†–∞–∑–º–µ—Ä: {final_stats['avg_size']:.1f}")
        print(f"   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {final_stats['avg_speed']:.1f}")
        print(f"   üõ°Ô∏è –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {final_stats['avg_energy_efficiency']:.2f}")
        print(f"   ‚öîÔ∏è –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å: {final_stats['avg_aggression']:.2f}")
    else:
        print("   üïê –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–∏")
        
    print(f"\n‚ú® –≠–ö–û–°–ò–°–¢–ï–ú–ù–´–ô –ë–ê–õ–ê–ù–°:")
    total = final_stats['population']
    if total > 0:
        pred_pct = final_stats['predators'] / total * 100
        herb_pct = final_stats['herbivores'] / total * 100
        omni_pct = final_stats['omnivores'] / total * 100
        
        print(f"   üî¥ –•–∏—â–Ω–∏–∫–∏: {pred_pct:4.1f}% (–æ–ø—Ç–∏–º—É–º ~20%)")
        print(f"   üü¢ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ: {herb_pct:4.1f}% (–æ–ø—Ç–∏–º—É–º ~50%)")
        print(f"   üîµ –í—Å–µ—è–¥–Ω—ã–µ: {omni_pct:4.1f}% (–æ–ø—Ç–∏–º—É–º ~30%)")
        
        if 15 <= pred_pct <= 25 and 40 <= herb_pct <= 60:
            print("   ‚úÖ –≠–∫–æ—Å–∏—Å—Ç–µ–º–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞!")
        else:
            print("   ‚ö†Ô∏è –≠–∫–æ—Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è...")

def demo_organism_types():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤"""
    print("\nüß¨ === –î–ï–ú–û –¢–ò–ü–û–í –û–†–ì–ê–ù–ò–ó–ú–û–í === üß¨\n")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã
    predator_genes = {
        'speed': 3.5, 'size': 8.0, 'energy_efficiency': 0.7,
        'reproduction_threshold': 120, 'aggression': 0.9, 'mutation_rate': 0.05,
        'diet_preference': 0.9, 'fear_sensitivity': 0.2,
        'color_r': 200, 'color_g': 50, 'color_b': 50
    }
    
    herbivore_genes = {
        'speed': 2.5, 'size': 5.0, 'energy_efficiency': 0.9,
        'reproduction_threshold': 80, 'aggression': 0.1, 'mutation_rate': 0.05,
        'diet_preference': 0.1, 'fear_sensitivity': 0.8,
        'color_r': 50, 'color_g': 200, 'color_b': 50
    }
    
    omnivore_genes = {
        'speed': 3.0, 'size': 6.0, 'energy_efficiency': 0.8,
        'reproduction_threshold': 100, 'aggression': 0.5, 'mutation_rate': 0.05,
        'diet_preference': 0.5, 'fear_sensitivity': 0.5,
        'color_r': 50, 'color_g': 50, 'color_b': 200
    }
    
    predator = Organism(100, 100, predator_genes)
    herbivore = Organism(200, 200, herbivore_genes)
    omnivore = Organism(300, 300, omnivore_genes)
    
    organisms = [predator, herbivore, omnivore]
    
    for org in organisms:
        print(f"{org.get_type_name().upper()} ({org.genes['diet_preference']:.1f}):")
        color = org.get_color()
        print(f"   –¶–≤–µ—Ç: RGB{color}")
        print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {'–û—Ö–æ—Ç–∞' if org.is_predator() else '–ë–µ–≥—Å—Ç–≤–æ' if org.is_herbivore() else '–ê–¥–∞–ø—Ç–∞—Ü–∏—è'}")
        print(f"   –≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {org.genes['energy_efficiency']:.1f}")
        print(f"   –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å: {org.genes['aggression']:.1f}")
        print(f"   –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {org.genes['fear_sensitivity']:.1f}")
        print()

if __name__ == "__main__":
    try:
        demo_organism_types()
        demo_ecosystem()
        print("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≥–ª–∞–≤–Ω—É—é –∏–≥—Ä—É: python3 main.py")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ: {e}")
        raise