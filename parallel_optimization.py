"""
–ú–æ–¥—É–ª—å –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —ç–≤–æ–ª—é—Ü–∏–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ —è–¥—Ä–∞ CPU –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –ø–æ–ø—É–ª—è—Ü–∏–π (1000+ –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤)
"""
# type: ignore

import multiprocessing as mp
import math
import time
from typing import List, Dict, Any
import concurrent.futures

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç NumPy –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
try:
    import numpy as np
    NUMPY_AVAILABLE = True
except ImportError:
    NUMPY_AVAILABLE = False
    print("‚ö†Ô∏è NumPy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

class ParallelSimulationProcessor:
    """–ú–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–º—É–ª—è—Ü–∏–∏"""
    
    def __init__(self, num_processes=None):
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        if num_processes is None:
            self.num_processes = max(1, mp.cpu_count() - 1)  # –û—Å—Ç–∞–≤–ª—è–µ–º 1 —è–¥—Ä–æ –¥–ª—è GUI
        else:
            self.num_processes = num_processes
            
        self.process_pool = None
        self.use_parallel = False
        
        print(f"üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.num_processes} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        
    def should_use_parallel(self, population_size):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–∞ –ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        # –í–∫–ª—é—á–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –ø—Ä–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏ > 200 –∏ –Ω–∞–ª–∏—á–∏–∏ >= 2 —è–¥–µ—Ä
        return population_size > 200 and self.num_processes > 1
        
    def start_pool(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—É–ª –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        if self.process_pool is None:
            self.process_pool = mp.Pool(processes=self.num_processes)
            self.use_parallel = True
            
    def stop_pool(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—É–ª –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        if self.process_pool:
            self.process_pool.close()
            self.process_pool.join()
            self.process_pool = None
            self.use_parallel = False
            
    def parallel_update_organisms(self, organisms_data, world_width, world_height, dt):
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤"""
        if not self.use_parallel or len(organisms_data) < 200:
            # –î–ª—è –º–∞–ª—ã—Ö –ø–æ–ø—É–ª—è—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
            return self._sequential_update(organisms_data, world_width, world_height, dt)
            
        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–º—ã –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        chunk_size = max(50, len(organisms_data) // self.num_processes)
        chunks = [organisms_data[i:i + chunk_size] for i in range(0, len(organisms_data), chunk_size)]
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            with concurrent.futures.ProcessPoolExecutor(max_workers=self.num_processes) as executor:
                futures = [
                    executor.submit(_update_organism_chunk, chunk, world_width, world_height, dt, i)
                    for i, chunk in enumerate(chunks)
                ]
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                updated_organisms = []
                for future in concurrent.futures.as_completed(futures):
                    try:
                        chunk_result = future.result(timeout=1.0)  # –¢–∞–π–º–∞—É—Ç 1 —Å–µ–∫
                        updated_organisms.extend(chunk_result)
                    except concurrent.futures.TimeoutError:
                        print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π")
                        return self._sequential_update(organisms_data, world_width, world_height, dt)
                        
                return updated_organisms
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return self._sequential_update(organisms_data, world_width, world_height, dt)
            
    def _sequential_update(self, organisms_data, world_width, world_height, dt):
        """–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return _update_organism_chunk(organisms_data, world_width, world_height, dt, 0)

class VectorizedOperations:
    """–í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å NumPy –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è"""
    
    @staticmethod
    def calculate_distances_vectorized(positions1, positions2):
        """–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–∞–±–æ—Ä–∞–º–∏ —Ç–æ—á–µ–∫"""
        if not NUMPY_AVAILABLE:
            return []
            
        pos1 = np.array(positions1)
        pos2 = np.array(positions2)
        
        # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        diff = pos1[:, np.newaxis] - pos2[np.newaxis, :]
        distances_squared = np.sum(diff**2, axis=2)
        
        return distances_squared
        
    @staticmethod
    def find_nearby_organisms_vectorized(org_positions, search_radius=80):
        """–í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –±–ª–∏–∑–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤"""
        if not NUMPY_AVAILABLE:
            return []
            
        positions = np.array(org_positions)
        
        if len(positions) == 0:
            return []
            
        # –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        distances_sq = VectorizedOperations.calculate_distances_vectorized(positions, positions)
        
        # –ù–∞–π–¥–µ–º —Å–æ—Å–µ–¥–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ
        radius_sq = search_radius * search_radius
        nearby_mask = (distances_sq < radius_sq) & (distances_sq > 0)
        
        return nearby_mask
        
    @staticmethod
    def update_energies_vectorized(organisms_data, dt):
        """–í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏"""
        if not NUMPY_AVAILABLE or not organisms_data:
            return
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤—ã NumPy
        sizes = np.array([org['size'] for org in organisms_data])
        speeds = np.array([org['speed'] for org in organisms_data])
        efficiencies = np.array([org['energy_efficiency'] for org in organisms_data])
        is_predator = np.array([org['is_predator'] for org in organisms_data])
        ages = np.array([org['age'] for org in organisms_data])
        max_lifespans = np.array([org['max_lifespan'] for org in organisms_data])
        
        # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
        base_consumption = (sizes * 0.015 + speeds * 0.008) * dt
        base_consumption[is_predator] *= 1.5
        
        # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ä–µ–Ω–∏—è
        age_ratios = ages / max_lifespans
        age_modifiers = np.ones_like(age_ratios)
        
        # –ú–æ–ª–æ–¥—ã–µ (0-30%)
        young_mask = age_ratios < 0.3
        age_modifiers[young_mask] = 0.7 + age_ratios[young_mask] * 1.0
        
        # –°—Ç–∞—Ä—ã–µ (70-100%)
        old_mask = age_ratios >= 0.7
        decline = (age_ratios[old_mask] - 0.7) / 0.3
        age_modifiers[old_mask] = 1.0 - decline * 0.4
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏
        modified_efficiencies = efficiencies * age_modifiers
        energy_deltas = -base_consumption / np.maximum(0.1, modified_efficiencies)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –∫ –æ—Ä–≥–∞–Ω–∏–∑–º–∞–º
        for i, org in enumerate(organisms_data):
            org['energy'] += energy_deltas[i]
            org['age'] += dt

def _update_organism_chunk(organisms_chunk, world_width, world_height, dt, chunk_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —á–∞–Ω–∫ –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ)"""
    
    updated_organisms = []
    
    for org_data in organisms_chunk:
        if not org_data.get('alive', True):
            continue
            
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        org_data['age'] += dt
        
        # –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
        base_consumption = (org_data['size'] * 0.015 + org_data['speed'] * 0.008) * dt
        if org_data.get('is_predator', False):
            base_consumption *= 1.5
            
        # –≠—Ñ—Ñ–µ–∫—Ç —Å—Ç–∞—Ä–µ–Ω–∏—è
        age_ratio = org_data['age'] / org_data.get('max_lifespan', 800)
        if age_ratio < 0.3:
            age_modifier = 0.7 + age_ratio * 1.0
        elif age_ratio < 0.7:
            age_modifier = 1.0
        else:
            decline = (age_ratio - 0.7) / 0.3
            age_modifier = 1.0 - decline * 0.4
            
        efficiency = org_data['energy_efficiency'] * age_modifier
        org_data['energy'] -= base_consumption / max(0.1, efficiency)
        
        # –î–≤–∏–∂–µ–Ω–∏–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ)
        speed = org_data['speed'] * age_modifier
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        import random
        if 'direction' not in org_data:
            org_data['direction'] = random.uniform(0, 2 * math.pi)
            
        if random.random() < 0.15:
            org_data['direction'] += random.uniform(-0.8, 0.8)
            
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        org_data['x'] += math.cos(org_data['direction']) * speed * dt
        org_data['y'] += math.sin(org_data['direction']) * speed * dt
        
        # –ì—Ä–∞–Ω–∏—Ü—ã –º–∏—Ä–∞
        if org_data['x'] < 0 or org_data['x'] > world_width:
            org_data['direction'] = np.pi - org_data['direction']
            org_data['x'] = max(0, min(world_width, org_data['x']))
            
        if org_data['y'] < 0 or org_data['y'] > world_height:
            org_data['direction'] = -org_data['direction']
            org_data['y'] = max(0, min(world_height, org_data['y']))
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ—Ä—Ç—å
        if org_data['energy'] <= 0 or org_data['age'] > org_data.get('max_lifespan', 800):
            org_data['alive'] = False
        else:
            # –†–∞—Å—á–µ—Ç –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏
            org_data['fitness'] = (org_data['energy'] * 0.1 + 
                                 org_data['age'] * 0.05 + 
                                 (200 - org_data.get('last_meal', 0)) * 0.02)
            
        updated_organisms.append(org_data)
        
    return updated_organisms

def convert_organism_to_data(organism):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –æ—Ä–≥–∞–Ω–∏–∑–º–∞ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    return {
        'x': organism.x,
        'y': organism.y,
        'energy': organism.energy,
        'age': organism.age,
        'alive': organism.alive,
        'generation': organism.generation,
        'fitness': organism.fitness,
        'max_lifespan': organism.max_lifespan,
        'speed': organism.genes['speed'],
        'size': organism.genes['size'],
        'energy_efficiency': organism.genes['energy_efficiency'],
        'is_predator': organism.is_predator(),
        'direction': getattr(organism, 'direction', 0),
        'last_meal': getattr(organism, 'last_meal', 0),
        'genes': organism.genes.copy()
    }

def update_organism_from_data(organism, data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –æ—Ä–≥–∞–Ω–∏–∑–º–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    organism.x = data['x']
    organism.y = data['y']
    organism.energy = data['energy']
    organism.age = data['age']
    organism.alive = data['alive']
    organism.fitness = data['fitness']
    organism.direction = data.get('direction', organism.direction)
    organism.last_meal = data.get('last_meal', organism.last_meal)

class PerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self):
        self.parallel_times = []
        self.sequential_times = []
        self.population_sizes = []
        
    def add_measurement(self, population_size, parallel_time=None, sequential_time=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.population_sizes.append(population_size)
        if parallel_time is not None:
            self.parallel_times.append(parallel_time)
        if sequential_time is not None:
            self.sequential_times.append(sequential_time)
            
    def get_speedup_ratio(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è"""
        if len(self.parallel_times) > 0 and len(self.sequential_times) > 0:
            avg_parallel = sum(self.parallel_times) / len(self.parallel_times)
            avg_sequential = sum(self.sequential_times) / len(self.sequential_times)
            return avg_sequential / avg_parallel if avg_parallel > 0 else 1.0
        return 1.0
        
    def should_use_parallel(self, population_size):
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞"""
        # –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –µ—Å–ª–∏ –ø–æ–ø—É–ª—è—Ü–∏—è > 300
        # –∏ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —É—Å–∫–æ—Ä–µ–Ω–∏–µ
        if population_size < 300:
            return False
            
        if len(self.parallel_times) < 3:
            return True  # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            
        return self.get_speedup_ratio() > 1.1  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ—Å–ª–∏ —É—Å–∫–æ—Ä–µ–Ω–∏–µ > 10%