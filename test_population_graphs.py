#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ–ø—É–ª—è—Ü–∏–π
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤
"""

from simulation import EvolutionSimulation
import time

def test_population_tracking():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ø—É–ª—è—Ü–∏–π –ø–æ —Ç–∏–ø–∞–º"""
    print("üß™ –¢–ï–°–¢ –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ü–û–ü–£–õ–Ø–¶–ò–ô –ü–û –¢–ò–ü–ê–ú")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º —Å–∏–º—É–ª—è—Ü–∏—é
    sim = EvolutionSimulation(width=900, height=700)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    print("–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    
    for step in range(200):
        sim.update(dt=1.0)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 20 —à–∞–≥–æ–≤
        if step % 20 == 0:
            stats = sim.get_statistics()
            print(f"–®–∞–≥ {step:3d}: üî¥{stats['predators']:2d} üü¢{stats['herbivores']:2d} üîµ{stats['omnivores']:2d} | –í—Å–µ–≥–æ: {stats['population']:2d}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—É–ª—è—Ü–∏–π
    pop_history = sim.get_population_history()
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø:")
    print(f"–¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(pop_history['time_steps'])}")
    print(f"–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {pop_history['time_steps'][0] if pop_history['time_steps'] else 0} - {pop_history['time_steps'][-1] if pop_history['time_steps'] else 0}")
    
    if pop_history['total']:
        print(f"\n–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–ø—É–ª—è—Ü–∏–π:")
        print(f"–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è: {pop_history['total'][0]}")
        print(f"–ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è: {pop_history['total'][-1]}")
        
        print(f"\n–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤:")
        final_pred = pop_history['predators'][-1] if pop_history['predators'] else 0
        final_herb = pop_history['herbivores'][-1] if pop_history['herbivores'] else 0  
        final_omni = pop_history['omnivores'][-1] if pop_history['omnivores'] else 0
        final_total = pop_history['total'][-1] if pop_history['total'] else 1
        
        print(f"üî¥ –•–∏—â–Ω–∏–∫–∏: {final_pred} ({final_pred/final_total*100:.1f}%)")
        print(f"üü¢ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ: {final_herb} ({final_herb/final_total*100:.1f}%)")
        print(f"üîµ –í—Å–µ—è–¥–Ω—ã–µ: {final_omni} ({final_omni/final_total*100:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π
        print(f"\nüìà –ê–ù–ê–õ–ò–ó –¢–ï–ù–î–ï–ù–¶–ò–ô:")
        if len(pop_history['predators']) >= 2:
            pred_change = pop_history['predators'][-1] - pop_history['predators'][0]
            herb_change = pop_history['herbivores'][-1] - pop_history['herbivores'][0]
            omni_change = pop_history['omnivores'][-1] - pop_history['omnivores'][0]
            
            print(f"üî¥ –•–∏—â–Ω–∏–∫–∏: {pred_change:+d} ({'—Ä–∞—Å—Ç—ë—Ç' if pred_change > 0 else '–ø–∞–¥–∞–µ—Ç' if pred_change < 0 else '—Å—Ç–∞–±–∏–ª—å–Ω–æ'})")
            print(f"üü¢ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ: {herb_change:+d} ({'—Ä–∞—Å—Ç—ë—Ç' if herb_change > 0 else '–ø–∞–¥–∞–µ—Ç' if herb_change < 0 else '—Å—Ç–∞–±–∏–ª—å–Ω–æ'})")
            print(f"üîµ –í—Å–µ—è–¥–Ω—ã–µ: {omni_change:+d} ({'—Ä–∞—Å—Ç—ë—Ç' if omni_change > 0 else '–ø–∞–¥–∞–µ—Ç' if omni_change < 0 else '—Å—Ç–∞–±–∏–ª—å–Ω–æ'})")
    
    return pop_history

def demonstrate_population_balance():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ø—É–ª—è—Ü–∏–π –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ"""
    print(f"\nüåç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–ê–õ–ê–ù–°–ê –≠–ö–û–°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    sim = EvolutionSimulation()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞
    sim.food_spawn_rate = 0.3  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    
    print("–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏...")
    print("–í—Ä–µ–º—è  | üî¥–•–∏—â | üü¢–¢—Ä–∞–≤ | üîµ–í—Å–µ—è–¥ | –í—Å–µ–≥–æ | –ü–∏—â–∞")
    print("-" * 50)
    
    for step in range(300):
        sim.update(dt=1.0)
        
        if step % 30 == 0:
            stats = sim.get_statistics()
            food_count = len([f for f in sim.get_food_sources() if not f.get('consumed', False)])
            
            print(f"{step:4d}   | {stats['predators']:4d} | {stats['herbivores']:4d}  | {stats['omnivores']:5d}  | {stats['population']:4d}  | {food_count:3d}")
    
    pop_history = sim.get_population_history()
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
    if len(pop_history['total']) >= 3:
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –≠–ö–û–°–ò–°–¢–ï–ú–´:")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        import statistics
        
        if pop_history['predators']:
            pred_cv = statistics.stdev(pop_history['predators']) / statistics.mean(pop_history['predators']) if statistics.mean(pop_history['predators']) > 0 else 0
            herb_cv = statistics.stdev(pop_history['herbivores']) / statistics.mean(pop_history['herbivores']) if statistics.mean(pop_history['herbivores']) > 0 else 0
            omni_cv = statistics.stdev(pop_history['omnivores']) / statistics.mean(pop_history['omnivores']) if statistics.mean(pop_history['omnivores']) > 0 else 0
            
            print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å):")
            print(f"üî¥ –•–∏—â–Ω–∏–∫–∏: {pred_cv:.3f} ({'—Å—Ç–∞–±–∏–ª—å–Ω–æ' if pred_cv < 0.5 else '–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ'})")
            print(f"üü¢ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ: {herb_cv:.3f} ({'—Å—Ç–∞–±–∏–ª—å–Ω–æ' if herb_cv < 0.5 else '–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ'})")
            print(f"üîµ –í—Å–µ—è–¥–Ω—ã–µ: {omni_cv:.3f} ({'—Å—Ç–∞–±–∏–ª—å–Ω–æ' if omni_cv < 0.5 else '–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ'})")
    
    return sim

def create_sample_data():
    """–°–æ–∑–¥–∞—ë—Ç –æ–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    print(f"\nüìä –°–û–ó–î–ê–ù–ò–ï –û–ë–†–ê–ó–¶–ê –î–ê–ù–ù–´–• –î–õ–Ø –ì–†–ê–§–ò–ö–û–í")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º —Å–∏–º—É–ª—è—Ü–∏—é –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    sim = EvolutionSimulation()
    
    # –ë—ã—Å—Ç—Ä–æ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for step in range(500):
        sim.update(dt=1.0)
        
        if step % 100 == 0:
            stats = sim.get_statistics()
            print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {step}/500 —à–∞–≥–æ–≤, –ø–æ–ø—É–ª—è—Ü–∏—è: {stats['population']}")
    
    pop_history = sim.get_population_history()
    gene_history = sim.get_gene_history()
    
    print(f"\n‚úÖ –î–ê–ù–ù–´–ï –ì–û–¢–û–í–´ –î–õ–Ø –ì–†–ê–§–ò–ö–û–í:")
    print(f"üìä –¢–æ—á–µ–∫ –ø–æ–ø—É–ª—è—Ü–∏–π: {len(pop_history['time_steps'])}")
    print(f"üß¨ –¢–æ—á–µ–∫ –≥–µ–Ω–æ–≤: {len(gene_history['speed']) if gene_history['speed'] else 0}")
    print(f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {pop_history['time_steps'][-1] if pop_history['time_steps'] else 0} —à–∞–≥–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if pop_history['total']:
        final_stats = sim.get_statistics()
        print(f"\n–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –ø–æ–ø—É–ª—è—Ü–∏–∏:")
        print(f"üî¥ –•–∏—â–Ω–∏–∫–∏: {final_stats['predators']} ({final_stats['predators']/final_stats['population']*100:.1f}%)")
        print(f"üü¢ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ: {final_stats['herbivores']} ({final_stats['herbivores']/final_stats['population']*100:.1f}%)")
        print(f"üîµ –í—Å–µ—è–¥–Ω—ã–µ: {final_stats['omnivores']} ({final_stats['omnivores']/final_stats['population']*100:.1f}%)")
    
    print(f"\nüé® –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏:")
    print(f"   python3 main.py -> –ö–Ω–æ–ø–∫–∞ '–ì—Ä–∞—Ñ–∏–∫–∏ —ç–≤–æ–ª—é—Ü–∏–∏'")
    
    return sim

if __name__ == "__main__":
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• –ì–†–ê–§–ò–ö–û–í –ü–û–ü–£–õ–Ø–¶–ò–ô")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        pop_history = test_population_tracking()
        
        # –¢–µ—Å—Ç 2: –ë–∞–ª–∞–Ω—Å —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
        sim = demonstrate_population_balance()
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        final_sim = create_sample_data()
        
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–´!")
        print(f"–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        raise