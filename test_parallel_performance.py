#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —ç–≤–æ–ª—é—Ü–∏–∏
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º –∏ –±–µ–∑ –Ω–µ–≥–æ
"""

import time
import multiprocessing as mp
from simulation import EvolutionSimulation
from organism import Organism
import random

def create_test_population(sim, target_size):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–ø—É–ª—è—Ü–∏—é –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
    print(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ –∏–∑ {target_size} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤...")
    
    # –ë—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–º—ã
    for _ in range(target_size):
        x = random.uniform(50, sim.width - 50)
        y = random.uniform(50, sim.height - 50)
        organism = Organism(x, y)
        organism.energy = random.uniform(100, 200)  # –ú–Ω–æ–≥–æ —ç–Ω–µ—Ä–≥–∏–∏
        organism.age = random.uniform(0, 300)
        sim.organisms.append(organism)
    
    alive_count = len([org for org in sim.organisms if org.alive])
    print(f"–°–æ–∑–¥–∞–Ω–æ {alive_count} –∂–∏–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤")
    return alive_count

def benchmark_processing_modes(population_sizes, steps=50):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö –ø–æ–ø—É–ª—è—Ü–∏–π"""
    
    print("üöÄ –¢–ï–°–¢ –ú–ù–û–ì–û–ü–†–û–¶–ï–°–°–û–†–ù–û–ô –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    print(f"–î–æ—Å—Ç—É–ø–Ω–æ CPU —è–¥–µ—Ä: {mp.cpu_count()}")
    
    results = []
    
    for pop_size in population_sizes:
        print(f"\nüìä –¢–ï–°–¢ –ü–û–ü–£–õ–Ø–¶–ò–ò: {pop_size} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤")
        print("-" * 40)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        sim = EvolutionSimulation()
        actual_size = create_test_population(sim, pop_size)
        
        if actual_size < pop_size * 0.8:  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 80% –æ—Ç —Ü–µ–ª–∏
            print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ ({actual_size} < {pop_size})")
            continue
        
        # –¢–µ—Å—Ç –ë–ï–ó –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º)
        sim.parallel_processor = None
        sim.performance_monitor = None
        sim.reset_performance_counters()
        
        print("üî∏ –¢–µ—Å—Ç –ë–ï–ó –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞...")
        start_time = time.time()
        
        for step in range(steps):
            sim.update(dt=1.0)
            if step % 10 == 0:
                alive = len([org for org in sim.organisms if org.alive])
                print(f"  –®–∞–≥ {step}: {alive} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤")
        
        sequential_time = time.time() - start_time
        seq_stats = sim.get_performance_stats()
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        sim = EvolutionSimulation()
        create_test_population(sim, pop_size)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
        has_parallel = hasattr(sim, 'parallel_processor') and sim.parallel_processor is not None
        
        if has_parallel:
            print("üî∏ –¢–µ—Å—Ç –° –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º...")
            sim.reset_performance_counters()
            
            start_time = time.time()
            
            for step in range(steps):
                sim.update(dt=1.0)
                if step % 10 == 0:
                    alive = len([org for org in sim.organisms if org.alive])
                    print(f"  –®–∞–≥ {step}: {alive} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤")
            
            parallel_time = time.time() - start_time
            par_stats = sim.get_performance_stats()
        else:
            print("‚ö†Ô∏è –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            parallel_time = sequential_time
            par_stats = seq_stats
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        speedup = sequential_time / parallel_time if parallel_time > 0 else 1.0
        
        print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¥–ª—è {actual_size} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤:")
        print(f"  –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ: {sequential_time:.2f}—Å (FPS: {seq_stats['fps']:.1f})")
        if has_parallel:
            print(f"  –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ:     {parallel_time:.2f}—Å (FPS: {par_stats['fps']:.1f})")
            print(f"  –£–°–ö–û–†–ï–ù–ò–ï:       {speedup:.1f}x")
            
            if speedup > 2.0:
                print("  üéâ –û–¢–õ–ò–ß–ù–û–ï —É—Å–∫–æ—Ä–µ–Ω–∏–µ!")
            elif speedup > 1.3:
                print("  üëç –•–û–†–û–®–ï–ï —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
            elif speedup > 1.1:
                print("  ‚úÖ –£–º–µ—Ä–µ–Ω–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
            else:
                print("  üòê –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
        else:
            print("  üì¥ –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        results.append({
            'population': actual_size,
            'sequential_time': sequential_time,
            'parallel_time': parallel_time,
            'speedup': speedup,
            'has_parallel': has_parallel
        })
    
    return results

def detailed_parallel_analysis():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüî¨ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–ê–†–ê–õ–õ–ï–õ–ò–ó–ú–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–µ—Å—è –ø–æ–ø—É–ª—è—Ü–∏–∏
    test_sizes = [200, 500, 800, 1200, 1500, 2000]
    
    results = benchmark_processing_modes(test_sizes, steps=30)
    
    if not results:
        print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    print(f"\nüìä –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê:")
    print("-" * 60)
    print("–ü–æ–ø—É–ª—è—Ü–∏—è | –ü–æ—Å–ª–µ–¥. | –ü–∞—Ä–∞–ª–ª. | –£—Å–∫–æ—Ä–µ–Ω–∏–µ | –°—Ç–∞—Ç—É—Å")
    print("-" * 60)
    
    total_speedup = 0
    parallel_tests = 0
    
    for result in results:
        pop = result['population']
        seq = result['sequential_time']
        par = result['parallel_time']
        speedup = result['speedup']
        has_par = result['has_parallel']
        
        status = "‚úÖ –ü–∞—Ä–∞–ª." if has_par and speedup > 1.1 else "‚ö†Ô∏è –ú–µ–¥–ª." if has_par else "‚ùå –ù–µ–¥–æ—Å—Ç."
        
        print(f"{pop:8d} | {seq:6.2f}—Å | {par:6.2f}—Å | {speedup:7.1f}x | {status}")
        
        if has_par:
            total_speedup += speedup
            parallel_tests += 1
    
    print("-" * 60)
    
    if parallel_tests > 0:
        avg_speedup = total_speedup / parallel_tests
        print(f"–°–†–ï–î–ù–ï–ï –£–°–ö–û–†–ï–ù–ò–ï: {avg_speedup:.1f}x")
        
        if avg_speedup > 2.5:
            print("üèÜ –ü–†–ï–í–û–°–•–û–î–ù–ê–Ø –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è!")
        elif avg_speedup > 1.8:
            print("üéØ –û–¢–õ–ò–ß–ù–ê–Ø –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è!")
        elif avg_speedup > 1.3:
            print("üëç –•–û–†–û–®–ê–Ø –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        else:
            print("üòê –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–µ–±–æ–ª—å—à–æ–µ")
            
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"  ‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏ > 500 –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤")
        print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –ø—Ä–∏ > 1000 –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤")
        print(f"  ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ {mp.cpu_count()} CPU —è–¥–µ—Ä –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        print(f"  ‚Ä¢ –î–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å 5x-15x")
    else:
        print("‚ùå –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω")

def quick_parallel_demo():
    """–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞"""
    print("‚ö° –ë–´–°–¢–†–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–ê–†–ê–õ–õ–ï–õ–ò–ó–ú–ê")
    print("=" * 50)
    
    results = benchmark_processing_modes([800], steps=20)
    
    if results:
        result = results[0]
        if result['has_parallel'] and result['speedup'] > 1.1:
            print(f"\nüéâ –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç! –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {result['speedup']:.1f}x")
            print(f"   –í–∞—à –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä ({mp.cpu_count()} —è–¥–µ—Ä) —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        else:
            print(f"\nüòê –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º")

if __name__ == "__main__":
    print("üß™ –í–´–ë–ï–†–ò–¢–ï –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("1. –ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è (1 –º–∏–Ω—É—Ç–∞)")
    print("2. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (5 –º–∏–Ω—É—Ç)")
    print("3. –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏")
    
    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        
        if choice == "1":
            quick_parallel_demo()
        elif choice == "2":
            detailed_parallel_analysis()
        elif choice == "3":
            print(f"CPU —è–¥–µ—Ä: {mp.cpu_count()}")
            
            try:
                from parallel_optimization import ParallelSimulationProcessor
                processor = ParallelSimulationProcessor()
                print(f"–ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º: ‚úÖ –î–û–°–¢–£–ü–ï–ù ({processor.num_processes} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)")
            except ImportError:
                print("–ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º: ‚ùå –ù–ï–î–û–°–¢–£–ü–ï–ù")
        else:
            print("–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
            quick_parallel_demo()
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")