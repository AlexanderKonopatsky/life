#!/usr/bin/env python3
"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
–ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–≥–∏–∫—É —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç GUI
"""

import threading
import time
import copy
from simulation import EvolutionSimulation

class AsyncSimulation:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è, —Ä–∞–±–æ—Ç–∞—é—â–∞—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ"""
    
    def __init__(self):
        self.simulation = EvolutionSimulation()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
        self.simulation_thread = None
        self.is_running = False
        self.should_stop = False
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.data_lock = threading.Lock()
        self.cached_organisms = []
        self.cached_food = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.cached_stats = {
            'population': 0,
            'predators': 0,
            'herbivores': 0,
            'omnivores': 0,
            'avg_generation': 0,
            'total_births': 0,
            'total_deaths': 0,
            'avg_speed': 0.0,
            'avg_size': 0.0,
            'avg_energy_efficiency': 0.0,
            'avg_aggression': 0.0,
            'avg_fitness': 0.0
        }
        
        self.cached_performance = {
            'fps': 0.0,
            'avg_frame_time': 0.0,
            'optimization': True,
            'cpu_cores': 1,
            'parallel_available': False,
            'async_mode': True,
            'async_simulation_fps': 0.0,
            'simulation_steps': 0,
            'speed_multiplier': 1.0
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.target_simulation_fps = 60  # –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 60 FPS
        self.speed_multiplier = 1.0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.actual_simulation_fps = 0
        self.simulation_steps = 0
        self.last_fps_time = time.time()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å–∏–º—É–ª—è—Ü–∏–∏
        self._update_cached_data()
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é —Å–∏–º—É–ª—è—Ü–∏—é"""
        if self.is_running:
            return
            
        self.is_running = True
        self.should_stop = False
        self.simulation_thread = threading.Thread(target=self._simulation_loop, daemon=True)
        self.simulation_thread.start()
        print("üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
        
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é —Å–∏–º—É–ª—è—Ü–∏—é"""
        if not self.is_running:
            return
            
        self.should_stop = True
        self.is_running = False
        
        if self.simulation_thread and self.simulation_thread.is_alive():
            self.simulation_thread.join(timeout=2.0)
            
        print("‚èπÔ∏è –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
    def pause(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é"""
        self.is_running = False
        
    def resume(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é"""
        if not self.should_stop and not self.is_running:
            self.is_running = True
        
    def reset(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é"""
        was_running = self.is_running
        self.stop()
        
        self.simulation = EvolutionSimulation()
        self._update_cached_data()
        
        if was_running:
            self.start()
        
    def set_speed(self, speed):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏"""
        self.speed_multiplier = max(0.1, min(50.0, speed))
        
    def set_parameters(self, **kwargs):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏"""
        with self.data_lock:
            self.simulation.set_parameters(**kwargs)
            
    def _simulation_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        frame_time = 1.0 / self.target_simulation_fps
        last_update = time.time()
        
        while not self.should_stop:
            current_time = time.time()
            
            if self.is_running:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π dt –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                # dt –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–π —Ñ–∏–∑–∏–∫–∏
                base_dt = frame_time  # 1/60 = 0.0167 —Å–µ–∫—É–Ω–¥
                dt = base_dt * self.speed_multiplier
                
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
                    self.simulation.update(dt)
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ä–µ–∂–µ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    if self.simulation_steps % 5 == 0:  # –ö–∞–∂–¥—ã–µ 5 —à–∞–≥–æ–≤ - –∫–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É —á–∞—Å—Ç–æ—Ç–æ–π –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
                        self._update_cached_data_fast()
                    
                    self.simulation_steps += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É FPS —Å–∏–º—É–ª—è—Ü–∏–∏
                    self._update_simulation_fps()
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–æ –∑–∞–º–µ–¥–ª—è–µ–º—Å—è
                    time.sleep(0.1)
            
            last_update = current_time
            
            # –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã –∫–∞–¥—Ä–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏
            elapsed = time.time() - current_time
            sleep_time = max(0, frame_time - elapsed)
            if sleep_time > 0:
                time.sleep(sleep_time)
                
    def _update_cached_data(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è GUI (thread-safe)"""
        try:
            with self.data_lock:
                # –ö—ç—à–∏—Ä—É–µ–º –æ—Ä–≥–∞–Ω–∏–∑–º—ã (–¥–µ–ª–∞–µ–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
                organisms = self.simulation.get_organisms()
                self.cached_organisms = [
                    {
                        'x': org.x, 'y': org.y, 
                        'size': org.genes['size'],
                        'color': org.get_color(),
                        'energy': org.energy,
                        'fitness': org.fitness,
                        'type': org.get_type_name(),
                        'generation': org.generation,
                        'age': org.age,
                        'alive': org.alive,
                        'genes': dict(org.genes),  # –ö–æ–ø–∏—è –≥–µ–Ω–æ–≤
                        'original': org  # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    }
                    for org in organisms if org.alive
                ]
                
                # –ö—ç—à–∏—Ä—É–µ–º –ø–∏—â—É
                food_sources = self.simulation.get_food_sources()
                self.cached_food = [
                    {
                        'x': food['x'], 'y': food['y'],
                        'size': food['size'], 'type': food.get('type', 'grass')
                    }
                    for food in food_sources if not food.get('consumed', False)
                ]
                
                # –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.cached_stats = dict(self.simulation.get_statistics())
                self.cached_performance = dict(self.simulation.get_performance_stats())
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏
                self.cached_performance.update({
                    'async_simulation_fps': self.actual_simulation_fps,
                    'async_mode': True,
                    'simulation_steps': self.simulation_steps,
                    'speed_multiplier': self.speed_multiplier
                })
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
            
    def _update_cached_data_fast(self):
        """–ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º trylock —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é
            if self.data_lock.acquire(blocking=False):
                try:
                    # –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
                    organisms = self.simulation.get_organisms()
                    self.cached_organisms = [
                        {
                            'x': org.x, 'y': org.y, 
                            'size': org.genes['size'],
                            'color': org.get_color(),
                            'energy': org.energy,
                            'original': org  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
                        }
                        for org in organisms if org.alive
                    ]
                    
                    # –ö—ç—à–∏—Ä—É–µ–º –ø–∏—â—É (–±—ã—Å—Ç—Ä–æ)
                    food_sources = self.simulation.get_food_sources()
                    self.cached_food = [
                        {
                            'x': food['x'], 'y': food['y'],
                            'size': food['size'], 'type': food.get('type', 'grass')
                        }
                        for food in food_sources if not food.get('consumed', False)
                    ]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    stats = self.simulation.get_statistics()
                    self.cached_stats.update({
                        'population': stats.get('population', 0),
                        'predators': stats.get('predators', 0),
                        'herbivores': stats.get('herbivores', 0),
                        'omnivores': stats.get('omnivores', 0)
                    })
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    self.cached_performance.update({
                        'async_simulation_fps': self.actual_simulation_fps,
                        'simulation_steps': self.simulation_steps,
                        'speed_multiplier': self.speed_multiplier
                    })
                    
                finally:
                    self.data_lock.release()
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
            
    def _update_simulation_fps(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É FPS —Å–∏–º—É–ª—è—Ü–∏–∏"""
        current_time = time.time()
        if current_time - self.last_fps_time >= 1.0:  # –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            time_elapsed = current_time - self.last_fps_time
            self.actual_simulation_fps = self.simulation_steps / time_elapsed
            
            self.simulation_steps = 0
            self.last_fps_time = current_time
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∏–∑ GUI –ø–æ—Ç–æ–∫–∞
    
    def get_organisms_snapshot(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–Ω–∏–º–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤ –¥–ª—è GUI (thread-safe)"""
        try:
            with self.data_lock:
                return list(self.cached_organisms)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é
        except:
            return []  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def get_food_snapshot(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–Ω–∏–º–æ–∫ –ø–∏—â–∏ –¥–ª—è GUI (thread-safe)"""
        try:
            with self.data_lock:
                return list(self.cached_food)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é
        except:
            return []  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
    def get_statistics_snapshot(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–Ω–∏–º–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è GUI (thread-safe)"""
        try:
            with self.data_lock:
                return dict(self.cached_stats)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é
        except:
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {
                'population': 0, 'predators': 0, 'herbivores': 0, 'omnivores': 0,
                'avg_generation': 0, 'total_births': 0, 'total_deaths': 0,
                'avg_speed': 0.0, 'avg_size': 0.0, 'avg_energy_efficiency': 0.0,
                'avg_aggression': 0.0, 'avg_fitness': 0.0
            }
            
    def get_performance_snapshot(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–Ω–∏–º–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è GUI (thread-safe)"""
        try:
            with self.data_lock:
                return dict(self.cached_performance)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é
        except:
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {
                'fps': 0.0, 'avg_frame_time': 0.0, 'optimization': True,
                'cpu_cores': 1, 'parallel_available': False, 'async_mode': True,
                'async_simulation_fps': 0.0, 'simulation_steps': 0, 'speed_multiplier': 1.0
            }
    
    def get_population_history(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—É–ª—è—Ü–∏–π"""
        with self.data_lock:
            return self.simulation.get_population_history()
            
    def get_gene_history(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≥–µ–Ω–æ–≤"""
        with self.data_lock:
            return self.simulation.get_gene_history()
            
    def get_best_organisms_snapshot(self, top_n=5):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–Ω–∏–º–æ–∫ –ª—É—á—à–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤"""
        with self.data_lock:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–º—ã –ø–æ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏
            sorted_organisms = sorted(self.cached_organisms, 
                                    key=lambda x: x['fitness'], reverse=True)
            return sorted_organisms[:top_n]
    
    def find_organism_by_position(self, x, y, max_distance=20):
        """–ù–∞—Ö–æ–¥–∏—Ç –æ—Ä–≥–∞–Ω–∏–∑–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è –∫–ª–∏–∫–æ–≤ –º—ã—à—å—é)"""
        with self.data_lock:
            min_distance = float('inf')
            closest_organism = None
            
            for org_data in self.cached_organisms:
                distance = ((x - org_data['x'])**2 + (y - org_data['y'])**2)**0.5
                if distance < min_distance and distance < max_distance:
                    min_distance = distance
                    closest_organism = org_data['original']  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª
                    
            return closest_organism
    
    def get_organism_info(self, organism):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–º–µ"""
        if organism and organism.alive:
            with self.data_lock:
                return organism.get_info()
        return None
    
    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏"""
        return {
            'is_running': self.is_running,
            'should_stop': self.should_stop,
            'thread_alive': self.simulation_thread.is_alive() if self.simulation_thread else False,
            'population': len(self.cached_organisms),
            'simulation_fps': self.actual_simulation_fps,
            'speed_multiplier': self.speed_multiplier
        }

# Singleton –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
_async_simulation_instance = None

def get_async_simulation():
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏"""
    global _async_simulation_instance
    if _async_simulation_instance is None:
        _async_simulation_instance = AsyncSimulation()
    return _async_simulation_instance

if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏...")
    
    async_sim = AsyncSimulation()
    async_sim.start()
    
    try:
        for i in range(20):
            time.sleep(0.5)
            status = async_sim.get_status()
            organisms = async_sim.get_organisms_snapshot()
            
            print(f"–®–∞–≥ {i+1}: {len(organisms)} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤, "
                  f"–°–∏–º—É–ª—è—Ü–∏—è FPS: {status['simulation_fps']:.1f}, "
                  f"–°–∫–æ—Ä–æ—Å—Ç—å: {status['speed_multiplier']}x")
                  
            if i == 10:
                print("üöÄ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ 5x")
                async_sim.set_speed(5.0)
                
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        async_sim.stop()
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")