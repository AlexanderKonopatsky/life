#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏
–ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞ –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
"""

import time
import threading
from async_simulation import AsyncSimulation

class PerformanceDiagnostic:
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏"""
    
    def __init__(self):
        self.async_sim = AsyncSimulation()
        self.monitoring = False
        self.stats = {
            'gui_frame_times': [],
            'cache_update_times': [],
            'simulation_fps_history': [],
            'population_history': []
        }
        
    def monitor_gui_performance(self, duration_seconds=30):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ GUI"""
        print(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GUI –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration_seconds} —Å–µ–∫—É–Ω–¥...")
        
        self.async_sim.start()
        self.monitoring = True
        
        start_time = time.time()
        frame_count = 0
        
        try:
            while time.time() - start_time < duration_seconds and self.monitoring:
                frame_start = time.time()
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É GUI - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                try:
                    organisms_data = self.async_sim.get_organisms_snapshot()
                    food_data = self.async_sim.get_food_snapshot()
                    stats_data = self.async_sim.get_statistics_snapshot()
                    perf_data = self.async_sim.get_performance_snapshot()
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    population = len(organisms_data)
                    sim_fps = perf_data.get('async_simulation_fps', 0)
                    
                    self.stats['population_history'].append(population)
                    self.stats['simulation_fps_history'].append(sim_fps)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                
                frame_time = time.time() - frame_start
                self.stats['gui_frame_times'].append(frame_time * 1000)  # –≤ –º—Å
                
                frame_count += 1
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º GUI FPS (30 FPS = 33.33ms –Ω–∞ –∫–∞–¥—Ä)
                time.sleep(max(0, 0.0333 - frame_time))
                
                # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                if frame_count % 150 == 0:  # –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ 30 FPS
                    elapsed = time.time() - start_time
                    avg_gui_time = sum(self.stats['gui_frame_times'][-150:]) / 150
                    current_pop = population
                    current_sim_fps = sim_fps
                    
                    print(f"  {elapsed:.1f}—Å: GUI {avg_gui_time:.1f}–º—Å/–∫–∞–¥—Ä, –ü–æ–ø—É–ª—è—Ü–∏—è: {current_pop}, –°–∏–º FPS: {current_sim_fps:.1f}")
                    
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        finally:
            self.monitoring = False
            self.async_sim.stop()
            
        return self._analyze_results()
    
    def _analyze_results(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.stats['gui_frame_times']:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return {
                'avg_gui_time_ms': 0,
                'max_gui_time_ms': 0,
                'avg_population': 0,
                'max_population': 0,
                'avg_sim_fps': 0,
                'slow_frames_count': 0
            }
            
        gui_times = self.stats['gui_frame_times']
        pop_history = self.stats['population_history']
        sim_fps_history = self.stats['simulation_fps_history']
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        print("=" * 50)
        
        # –ê–Ω–∞–ª–∏–∑ GUI –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        avg_gui_time = sum(gui_times) / len(gui_times)
        max_gui_time = max(gui_times)
        min_gui_time = min(gui_times)
        
        print(f"GUI –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞: {avg_gui_time:.2f}–º—Å")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_gui_time:.2f}–º—Å")
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_gui_time:.2f}–º—Å")
        print(f"  –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è (30 FPS): 33.33–º—Å")
        
        if avg_gui_time > 33.33:
            print(f"  ‚ö†Ô∏è GUI —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ —Ü–µ–ª–µ–≤–æ–≥–æ FPS!")
        else:
            print(f"  ‚úÖ GUI –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")
            
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ü–∏–∏
        avg_pop = 0
        max_pop = 0
        min_pop = 0
        if pop_history:
            avg_pop = sum(pop_history) / len(pop_history)
            max_pop = max(pop_history)
            min_pop = min(pop_history)
            
            print(f"\n–ü–û–ü–£–õ–Ø–¶–ò–Ø:")
            print(f"  –°—Ä–µ–¥–Ω—è—è: {avg_pop:.0f} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤")
            print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min_pop}")
            print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max_pop}")
            
        # –ê–Ω–∞–ª–∏–∑ —Å–∏–º—É–ª—è—Ü–∏–∏
        valid_fps = []
        avg_sim_fps = 0
        if sim_fps_history:
            valid_fps = [fps for fps in sim_fps_history if fps > 0]
            if valid_fps:
                avg_sim_fps = sum(valid_fps) / len(valid_fps)
                print(f"\n–°–ò–ú–£–õ–Ø–¶–ò–Ø:")
                print(f"  –°—Ä–µ–¥–Ω–∏–π FPS: {avg_sim_fps:.1f}")
                print(f"  –¶–µ–ª–µ–≤–æ–π FPS: 60")
                
                if avg_sim_fps < 50:
                    print(f"  ‚ö†Ô∏è –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ —Ü–µ–ª–µ–≤–æ–≥–æ FPS!")
                else:
                    print(f"  ‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")
        
        # –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú:")
        
        slow_frames = [t for t in gui_times if t > 50]  # –ö–∞–¥—Ä—ã –¥–æ–ª—å—à–µ 50–º—Å
        if slow_frames:
            print(f"  ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(slow_frames)} –º–µ–¥–ª–µ–Ω–Ω—ã—Ö GUI –∫–∞–¥—Ä–æ–≤ (>{50}–º—Å)")
            print(f"  –°–∞–º—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π –∫–∞–¥—Ä: {max(slow_frames):.2f}–º—Å")
        else:
            print(f"  ‚úÖ –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö GUI –∫–∞–¥—Ä–æ–≤")
            
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if avg_gui_time > 40:
            print(f"  üîß GUI —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π - –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏")
            
        if max_pop > 500:
            print(f"  üîß –ü—Ä–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏ >{max_pop} –≤–æ–∑–º–æ–∂–Ω—ã –ª–∞–≥–∏ - —É—Å–∏–ª–∏—Ç—å –ø—Ä–æ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏")
            
        if valid_fps and avg_sim_fps < 50:
            print(f"  üîß –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤")
            
        return {
            'avg_gui_time_ms': avg_gui_time,
            'max_gui_time_ms': max_gui_time,
            'avg_population': avg_pop,
            'max_population': max_pop,
            'avg_sim_fps': avg_sim_fps,
            'slow_frames_count': len(slow_frames)
        }

def quick_diagnostic():
    """–ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞ 15 —Å–µ–∫—É–Ω–¥"""
    print("‚ö° –ë–´–°–¢–†–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    
    diagnostic = PerformanceDiagnostic()
    results = diagnostic.monitor_gui_performance(duration_seconds=15)
    
    print(f"\nüéØ –ö–†–ê–¢–ö–ò–ï –í–´–í–û–î–´:")
    if results['avg_gui_time_ms'] < 35:
        print("‚úÖ GUI –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è")
    elif results['avg_gui_time_ms'] < 50:
        print("‚ö†Ô∏è GUI –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–∞—è")
    else:
        print("üö® GUI –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–∞")
        
    if results['avg_sim_fps'] > 55:
        print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ")
    elif results['avg_sim_fps'] > 45:
        print("‚ö†Ô∏è –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–µ–º–ª–µ–º–æ")
    else:
        print("üö® –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ")

def stress_test():
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å –±–æ–ª—å—à–æ–π –ø–æ–ø—É–ª—è—Ü–∏–µ–π"""
    print("üî• –°–¢–†–ï–°–°-–¢–ï–°–¢ –° –ë–û–õ–¨–®–û–ô –ü–û–ü–£–õ–Ø–¶–ò–ï–ô")
    print("=" * 50)
    
    diagnostic = PerformanceDiagnostic()
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é –ø–æ–ø—É–ª—è—Ü–∏—é
    print("–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏...")
    for i in range(300):  # –°–æ–∑–¥–∞–µ–º 300 –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤
        from organism import Organism
        import random
        x = random.uniform(50, 850)
        y = random.uniform(50, 650)
        organism = Organism(x, y)
        organism.energy = random.uniform(120, 200)
        diagnostic.async_sim.simulation.organisms.append(organism)
    
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(diagnostic.async_sim.simulation.organisms)} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤")
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    results = diagnostic.monitor_gui_performance(duration_seconds=20)
    
    print(f"\nüî• –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–¢–†–ï–°–°-–¢–ï–°–¢–ê:")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è: {results['max_population']}")
    print(f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å GUI: {results['avg_gui_time_ms']:.1f}–º—Å")
    print(f"–ú–µ–¥–ª–µ–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤: {results['slow_frames_count']}")

if __name__ == "__main__":
    print("üß™ –í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print("1. –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (15 —Å–µ–∫—É–Ω–¥)")
    print("2. –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å –±–æ–ª—å—à–æ–π –ø–æ–ø—É–ª—è—Ü–∏–µ–π")
    print("3. –ü–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (30 —Å–µ–∫—É–Ω–¥)")
    
    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        
        if choice == "1":
            quick_diagnostic()
        elif choice == "2":
            stress_test()
        elif choice == "3":
            diagnostic = PerformanceDiagnostic()
            diagnostic.monitor_gui_performance(duration_seconds=30)
        else:
            print("–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")
            quick_diagnostic()
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")