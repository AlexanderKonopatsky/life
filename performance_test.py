#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∏ –±–µ–∑ –Ω–µ—ë
"""

from simulation import EvolutionSimulation
from organism import Organism
import time
import random

def create_large_population(sim, target_population):
    """–°–æ–∑–¥–∞—ë—Ç –±–æ–ª—å—à—É—é –ø–æ–ø—É–ª—è—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ –∏–∑ {target_population} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–º—ã –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    while len(sim.get_organisms()) < target_population:
        # –°–æ–∑–¥–∞—ë–º –æ—Ä–≥–∞–Ω–∏–∑–º—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        for _ in range(min(50, target_population - len(sim.get_organisms()))):
            x = random.uniform(50, sim.width - 50)
            y = random.uniform(50, sim.height - 50)
            organism = Organism(x, y)
            organism.energy = random.uniform(80, 150)  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏
            organism.age = random.uniform(0, 200)
            sim.organisms.append(organism)
            
        # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –¥–ª—è —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è
        for _ in range(10):
            sim.update(dt=1.0)
            
        alive_count = len([org for org in sim.organisms if org.alive])
        print(f"  –¢–µ–∫—É—â–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è: {alive_count}")
        
        if alive_count == 0:  # –ï—Å–ª–∏ –≤—Å–µ —É–º–µ—Ä–ª–∏, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
            sim._spawn_initial_organisms()

def benchmark_simulation(population_size, steps=100):
    """–ë–µ–Ω—á–º–∞—Ä–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –ø–æ–ø—É–ª—è—Ü–∏–∏"""
    print(f"\nüî¨ –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò - {population_size} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞—ë–º —Å–∏–º—É–ª—è—Ü–∏—é
    sim = EvolutionSimulation(width=900, height=700)
    
    # –°–æ–∑–¥–∞—ë–º –±–æ–ª—å—à—É—é –ø–æ–ø—É–ª—è—Ü–∏—é
    create_large_population(sim, population_size)
    
    final_population = len([org for org in sim.organisms if org.alive])
    print(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞: {final_population}")
    
    # –¢–µ—Å—Ç –ë–ï–ó –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    print(f"\nüìä –¢–ï–°–¢ –ë–ï–ó –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    sim.use_optimization = False
    sim.reset_performance_counters()
    
    start_time = time.time()
    for step in range(steps):
        sim.update(dt=1.0)
        if step % 20 == 0:
            current_pop = len([org for org in sim.organisms if org.alive])
            print(f"  –®–∞–≥ {step}: –ø–æ–ø—É–ª—è—Ü–∏—è {current_pop}")
    
    unoptimized_time = time.time() - start_time
    unoptimized_stats = sim.get_performance_stats()
    
    # –¢–µ—Å—Ç –° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    print(f"\n‚ö° –¢–ï–°–¢ –° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π:")
    sim.use_optimization = True
    sim.reset_performance_counters()
    
    start_time = time.time()
    for step in range(steps):
        sim.update(dt=1.0)
        if step % 20 == 0:
            current_pop = len([org for org in sim.organisms if org.alive])
            print(f"  –®–∞–≥ {step}: –ø–æ–ø—É–ª—è—Ü–∏—è {current_pop}")
    
    optimized_time = time.time() - start_time
    optimized_stats = sim.get_performance_stats()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ ({population_size} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤, {steps} —à–∞–≥–æ–≤):")
    print("-" * 50)
    print(f"–ë–ï–ó –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    print(f"  –û–±—â–µ–µ –≤—Ä–µ–º—è: {unoptimized_time:.2f}—Å")
    print(f"  –í—Ä–µ–º—è/–∫–∞–¥—Ä: {unoptimized_stats['avg_frame_time']:.1f}–º—Å")
    print(f"  FPS: {unoptimized_stats['fps']:.1f}")
    
    print(f"\n–° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π:")
    print(f"  –û–±—â–µ–µ –≤—Ä–µ–º—è: {optimized_time:.2f}—Å") 
    print(f"  –í—Ä–µ–º—è/–∫–∞–¥—Ä: {optimized_stats['avg_frame_time']:.1f}–º—Å")
    print(f"  FPS: {optimized_stats['fps']:.1f}")
    
    if unoptimized_time > 0:
        speedup = unoptimized_time / optimized_time
        print(f"\nüöÄ –£–°–ö–û–†–ï–ù–ò–ï: {speedup:.1f}x")
        
        if speedup > 1.5:
            print("‚úÖ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!")
        elif speedup > 1.1:
            print("‚úÖ –£–º–µ—Ä–µ–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        else:
            print("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ")
    
    return {
        'population': final_population,
        'unoptimized_time': unoptimized_time,
        'optimized_time': optimized_time,
        'speedup': unoptimized_time / optimized_time if optimized_time > 0 else 1
    }

def run_full_benchmark():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏"""
    print("üèÅ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ø—É–ª—è—Ü–∏–π
    test_sizes = [100, 300, 500, 800, 1000]
    results = []
    
    for size in test_sizes:
        try:
            result = benchmark_simulation(size, steps=50)
            results.append(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ {size} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤: {e}")
            continue
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print(f"\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:")
    print("=" * 60)
    print("–ü–æ–ø—É–ª—è—Ü–∏—è | –ë–µ–∑ –æ–ø—Ç. | –° –æ–ø—Ç. | –£—Å–∫–æ—Ä–µ–Ω–∏–µ")
    print("-" * 45)
    
    total_speedup = 0
    valid_tests = 0
    
    for result in results:
        pop = result['population']
        unopt = result['unoptimized_time']
        opt = result['optimized_time'] 
        speedup = result['speedup']
        
        print(f"{pop:8d} | {unopt:7.2f}—Å | {opt:6.2f}—Å | {speedup:7.1f}x")
        
        total_speedup += speedup
        valid_tests += 1
    
    if valid_tests > 0:
        avg_speedup = total_speedup / valid_tests
        print("-" * 45)
        print(f"–°–†–ï–î–ù–ï–ï –£–°–ö–û–†–ï–ù–ò–ï: {avg_speedup:.1f}x")
        
        if avg_speedup > 3:
            print("üéâ –û–¢–õ–ò–ß–ù–ê–Ø –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è!")
        elif avg_speedup > 2:
            print("üéØ –•–û–†–û–®–ê–Ø –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è!")
        elif avg_speedup > 1.5:
            print("üëç –ù–ï–ü–õ–û–•–ê–Ø –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        else:
            print("ü§î –ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")

def quick_demo():
    """–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("‚ö° –ë–´–°–¢–†–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
    print("=" * 50)
    
    sim = EvolutionSimulation()
    
    # –°–æ–∑–¥–∞—ë–º –ø–æ–ø—É–ª—è—Ü–∏—é ~200 –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤
    create_large_population(sim, 200)
    current_pop = len([org for org in sim.organisms if org.alive])
    
    print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å {current_pop} –æ—Ä–≥–∞–Ω–∏–∑–º–∞–º–∏...")
    
    # –¢–µ—Å—Ç –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (10 —à–∞–≥–æ–≤)
    sim.use_optimization = False
    sim.reset_performance_counters()
    
    start = time.time()
    for _ in range(10):
        sim.update()
    unopt_time = time.time() - start
    
    # –¢–µ—Å—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π (10 —à–∞–≥–æ–≤)
    sim.use_optimization = True
    sim.reset_performance_counters()
    
    start = time.time()
    for _ in range(10):
        sim.update()
    opt_time = time.time() - start
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (10 –∫–∞–¥—Ä–æ–≤):")
    print(f"–ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {unopt_time:.3f}—Å")
    print(f"–° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π:  {opt_time:.3f}—Å")
    
    if opt_time > 0:
        speedup = unopt_time / opt_time
        print(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")

if __name__ == "__main__":
    import sys
    
    try:
        if len(sys.argv) > 1 and sys.argv[1] == "quick":
            quick_demo()
        elif len(sys.argv) > 1 and sys.argv[1] == "full":
            run_full_benchmark()
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–¥–∏–Ω —Ç–µ—Å—Ç
            benchmark_simulation(500, steps=30)
            
        print(f"\nüéÆ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≥–ª–∞–≤–Ω—É—é –∏–≥—Ä—É: python3 main.py")
        print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è' –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
        
    except KeyboardInterrupt:
        print(f"\n‚õî –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        raise