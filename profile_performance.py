#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
–ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞ –∏ bottlenecks
"""

import time
import random
import cProfile
import pstats
import io
from simulation import EvolutionSimulation
from organism import Organism

class PerformanceProfiler:
    """–ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏"""
    
    def __init__(self):
        self.timings = {}
        
    def create_large_population(self, sim, target_size):
        """–ë—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞–µ—Ç –±–æ–ª—å—à—É—é –ø–æ–ø—É–ª—è—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ {target_size} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–º—ã –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è
        for i in range(target_size):
            x = random.uniform(50, sim.width - 50)
            y = random.uniform(50, sim.height - 50)
            organism = Organism(x, y)
            organism.energy = random.uniform(120, 200)  # –í—ã—Å–æ–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è
            organism.age = int(random.uniform(0, 100))  # –ú–æ–ª–æ–¥—ã–µ
            sim.organisms.append(organism)
            
        alive_count = len([org for org in sim.organisms if org.alive])
        print(f"–°–æ–∑–¥–∞–Ω–æ {alive_count} –∂–∏–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤")
        return alive_count
        
    def profile_simulation_step(self, population_size, steps=10):
        """–ü—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —à–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        print(f"\nüîç –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï {population_size} –û–†–ì–ê–ù–ò–ó–ú–û–í")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Å –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–ø—É–ª—è—Ü–∏–µ–π
        sim = EvolutionSimulation()
        actual_size = self.create_large_population(sim, population_size)
        
        # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        for _ in range(3):
            sim.update(dt=1.0)
        
        print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {steps} —à–∞–≥–æ–≤...")
        
        # –ü—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ–º —Å cProfile
        profiler = cProfile.Profile()
        
        start_time = time.time()
        profiler.enable()
        
        for step in range(steps):
            sim.update(dt=1.0)
            
        profiler.disable()
        total_time = time.time() - start_time
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        s = io.StringIO()
        ps = pstats.Stats(profiler, stream=s)
        ps.sort_stats('cumulative')
        ps.print_stats(20)  # –¢–æ–ø 20 —Ñ—É–Ω–∫—Ü–∏–π
        
        profile_output = s.getvalue()
        
        print(f"\n‚è±Ô∏è –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.3f}—Å")
        print(f"–í—Ä–µ–º—è –Ω–∞ —à–∞–≥: {total_time/steps:.3f}—Å")
        print(f"FPS: {steps/total_time:.1f}")
        
        final_population = len([org for org in sim.organisms if org.alive])
        print(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è: {final_population}")
        
        return {
            'population_size': actual_size,
            'total_time': total_time,
            'time_per_step': total_time / steps,
            'fps': steps / total_time,
            'profile_data': profile_output
        }
        
    def detailed_timing_analysis(self, population_size):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º"""
        print(f"\nüïê –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ò ({population_size} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤)")
        print("=" * 60)
        
        sim = EvolutionSimulation()
        self.create_large_population(sim, population_size)
        
        # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º
        for _ in range(3):
            sim.update(dt=1.0)
        
        components = {
            'spawn_food': 0,
            'update_organisms': 0,
            'handle_reproduction': 0,
            'remove_dead': 0,
            'update_statistics': 0,
            'other': 0
        }
        
        num_tests = 20
        print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {num_tests} —à–∞–≥–æ–≤...")
        
        for step in range(num_tests):
            step_start = time.time()
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
            
            # 1. Spawn food
            start = time.time()
            sim._spawn_food()
            components['spawn_food'] += time.time() - start
            
            # 2. Update organisms  
            start = time.time()
            population_size_current = len([org for org in sim.organisms if org.alive])
            
            if hasattr(sim, 'parallel_processor') and sim.parallel_processor and population_size_current > 100:
                sim._parallel_update(1.0)
            elif sim.use_optimization:
                sim._optimized_update(1.0)
            else:
                sim._simple_update(1.0)
                
            components['update_organisms'] += time.time() - start
            
            # 3. Handle reproduction
            start = time.time()
            sim._handle_reproduction()
            components['handle_reproduction'] += time.time() - start
            
            # 4. Remove dead
            start = time.time() 
            sim._remove_dead_organisms()
            components['remove_dead'] += time.time() - start
            
            # 5. Update statistics
            start = time.time()
            if step % 5 == 0:
                sim._update_statistics()
            components['update_statistics'] += time.time() - start
            
            # 6. Other overhead
            step_total = time.time() - step_start
            measured_total = sum(components.values())
            components['other'] += max(0, step_total - measured_total)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_time = sum(components.values())
        print(f"\n–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò (–≤—Å–µ–≥–æ {total_time:.3f}—Å):")
        print("-" * 50)
        
        sorted_components = sorted(components.items(), key=lambda x: x[1], reverse=True)
        
        for component, time_spent in sorted_components:
            percentage = (time_spent / total_time) * 100 if total_time > 0 else 0
            avg_time = time_spent / num_tests * 1000  # –º—Å –Ω–∞ —à–∞–≥
            
            print(f"{component:20s}: {time_spent:.3f}—Å ({percentage:5.1f}%) | {avg_time:.1f}–º—Å/—à–∞–≥")
            
        print("-" * 50)
        print(f"–ò–¢–û–ì–û: {total_time:.3f}—Å (100.0%)")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if components['update_organisms'] > total_time * 0.7:
            print("  ‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤ –∑–∞–Ω–∏–º–∞–µ—Ç >70% –≤—Ä–µ–º–µ–Ω–∏ - –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤")
        
        if components['spawn_food'] > total_time * 0.1:
            print("  ‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—â–∏ –∑–∞–Ω–∏–º–∞–µ—Ç >10% –≤—Ä–µ–º–µ–Ω–∏ - –º–æ–∂–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å")
            
        if components['update_statistics'] > total_time * 0.1:
            print("  ‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–Ω–∏–º–∞–µ—Ç >10% –≤—Ä–µ–º–µ–Ω–∏ - –Ω—É–∂–Ω–æ —Ä–µ–∂–µ –æ–±–Ω–æ–≤–ª—è—Ç—å")
            
        if components['handle_reproduction'] > total_time * 0.2:
            print("  ‚ö†Ô∏è –†–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç >20% –≤—Ä–µ–º–µ–Ω–∏ - –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
            
        print(f"  ‚úÖ –î–ª—è {population_size} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —à–∞–≥–∞: <{50/population_size*1000:.1f}–º—Å")
        
        return components
        
    def compare_optimization_modes(self, population_size):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        print(f"\nüèÅ –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ñ–ò–ú–û–í –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ({population_size} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤)")
        print("=" * 70)
        
        modes = [
            ("–ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", False, False),
            ("–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", True, False), 
            ("–ú–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ—Å—Ç—å", True, True)
        ]
        
        results = {}
        
        for mode_name, use_spatial, use_parallel in modes:
            print(f"\nüî∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {mode_name}")
            
            sim = EvolutionSimulation()
            self.create_large_population(sim, population_size)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∂–∏–º
            sim.use_optimization = use_spatial
            if not use_parallel:
                sim.parallel_processor = None
                sim.performance_monitor = None
            
            # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º
            for _ in range(3):
                sim.update(dt=1.0)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º
            steps = 15
            start_time = time.time()
            
            for step in range(steps):
                sim.update(dt=1.0)
                if step % 5 == 0:
                    alive = len([org for org in sim.organisms if org.alive])
                    print(f"  –®–∞–≥ {step}: {alive} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤")
            
            test_time = time.time() - start_time
            fps = steps / test_time
            
            results[mode_name] = {
                'time': test_time,
                'fps': fps,
                'time_per_step': test_time / steps
            }
            
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {test_time:.2f}—Å ({fps:.1f} FPS)")
        
        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        print(f"\nüìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê:")
        print("-" * 70)
        print("–†–µ–∂–∏–º                        | –í—Ä–µ–º—è  | FPS   | –º—Å/—à–∞–≥ | –£—Å–∫–æ—Ä–µ–Ω–∏–µ")
        print("-" * 70)
        
        baseline_time = results[list(results.keys())[0]]['time']
        
        for mode_name, data in results.items():
            speedup = baseline_time / data['time']
            ms_per_step = data['time_per_step'] * 1000
            
            print(f"{mode_name:28s} | {data['time']:5.2f}—Å | {data['fps']:4.1f} | {ms_per_step:5.1f}  | {speedup:6.1f}x")
        
        print("-" * 70)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        best_mode = max(results.items(), key=lambda x: x[1]['fps'])
        print(f"\nüèÜ –õ–£–ß–®–ò–ô –†–ï–ñ–ò–ú: {best_mode[0]} ({best_mode[1]['fps']:.1f} FPS)")
        
        return results

def run_comprehensive_analysis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    profiler = PerformanceProfiler()
    
    print("üî¨ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    test_sizes = [200, 500, 1000, 1500]
    
    for size in test_sizes:
        print(f"\n{'='*20} –ü–û–ü–£–õ–Ø–¶–ò–Ø {size} {'='*20}")
        
        # 1. –ë–∞–∑–æ–≤–æ–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        profile_result = profiler.profile_simulation_step(size, steps=15)
        
        # 2. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏
        timing_analysis = profiler.detailed_timing_analysis(size)
        
        # 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        mode_comparison = profiler.compare_optimization_modes(size)
        
        print(f"\nüìã –ö–†–ê–¢–ö–ò–ï –í–´–í–û–î–´ –î–õ–Ø {size} –û–†–ì–ê–ù–ò–ó–ú–û–í:")
        if profile_result['fps'] < 10:
            print("  ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: FPS < 10 - –Ω—É–∂–Ω–∞ —Å—Ä–æ—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        elif profile_result['fps'] < 20:
            print("  ‚ö†Ô∏è –ú–ï–î–õ–ï–ù–ù–û: FPS < 20 - –∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        else:
            print("  ‚úÖ –ü–†–ò–ï–ú–õ–ï–ú–û: FPS > 20")
            
        # –¢–æ–ø —É–∑–∫–æ–µ –º–µ—Å—Ç–æ
        top_bottleneck = max(timing_analysis.items(), key=lambda x: x[1])
        print(f"  üéØ –û—Å–Ω–æ–≤–Ω–æ–µ —É–∑–∫–æ–µ –º–µ—Å—Ç–æ: {top_bottleneck[0]} ({top_bottleneck[1]/sum(timing_analysis.values())*100:.1f}%)")

def quick_performance_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("‚ö° –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    
    profiler = PerformanceProfiler()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é –ø–æ–ø—É–ª—è—Ü–∏—é
    problem_size = 1000
    print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ {problem_size} –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤...")
    
    result = profiler.profile_simulation_step(problem_size, steps=10)
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"FPS: {result['fps']:.1f}")
    print(f"–í—Ä–µ–º—è –Ω–∞ —à–∞–≥: {result['time_per_step']*1000:.1f}–º—Å")
    
    if result['fps'] < 5:
        print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!")
    elif result['fps'] < 15:
        print("‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∂–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π")
    else:
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–∞—è")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø bottlenecks –∏–∑ –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞
    lines = result['profile_data'].split('\n')
    print(f"\nüîç –¢–û–ü –§–£–ù–ö–¶–ò–ô –ü–û –í–†–ï–ú–ï–ù–ò:")
    for i, line in enumerate(lines[5:15]):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if line.strip() and 'ncalls' not in line:
            print(f"  {line}")

if __name__ == "__main__":
    print("üß™ –í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –ê–ù–ê–õ–ò–ó–ê:")
    print("1. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (1 –º–∏–Ω—É—Ç–∞)")
    print("2. –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (10 –º–∏–Ω—É—Ç)")
    print("3. –¢–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏")
    
    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        
        if choice == "1":
            quick_performance_check()
        elif choice == "2":
            run_comprehensive_analysis()
        elif choice == "3":
            profiler = PerformanceProfiler()
            size = int(input("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏: "))
            profiler.detailed_timing_analysis(size)
        else:
            print("–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            quick_performance_check()
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")